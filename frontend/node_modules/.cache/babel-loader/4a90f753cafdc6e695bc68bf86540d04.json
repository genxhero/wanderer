{"ast":null,"code":"import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\nvar $ = window.$;\nexport var GET_ERRORS = \"GET_ERRORS\";\nexport var CLEAR_ERRORS = \"CLEAR_ERRORS\";\nexport var RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\nexport var setAuthToken = function setAuthToken(token) {\n  if (token) {\n    // This applies the authentication to all the headers - no more having to Postman hack it in\n    axios.defaults.headers.common['Authorization'] = token;\n  } else {\n    // Delete auth header - so that when you aren't authorized, it doesn't authorize you\n    delete axios.defaults.headers.common['Authorization'];\n  }\n}; //Register User function\n\nexport var registerUser = function registerUser(userData, history) {\n  return function (dispatch) {\n    axios.post('/api/users/register', userData).then(function (res) {\n      //Save to localStorage\n      var token = res.data.token; //Set token to ls\n\n      localStorage.setItem('jwtToken', token); //Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; //Login User function - Get User Token\n\nexport var loginUser = function loginUser(userData) {\n  return function (dispatch) {\n    axios.post('/api/users/login', userData).then(function (res) {\n      //Save to localStorage\n      var token = res.data.token; //Set token to ls\n\n      localStorage.setItem('jwtToken', token); // Set token to Auth header\n\n      setAuthToken(token); // Decode token to get user data\n\n      var decoded = jwt_decode(token); // Set current user\n\n      dispatch(setCurrentUser(decoded));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n}; // Set logged in user\n\nexport var setCurrentUser = function setCurrentUser(decoded) {\n  return {\n    type: RECEIVE_CURRENT_USER,\n    payload: decoded\n  };\n}; // Log user out\n\nexport var logoutUser = function logoutUser() {\n  return function (dispatch) {\n    // Remove token from localStorage\n    localStorage.removeItem('jwtToken'); // Remove auth header for future requests\n\n    setAuthToken(false); // Set current user to {} which will set isAuthenticated to false\n\n    dispatch(setCurrentUser({}));\n  };\n};","map":{"version":3,"sources":["/Users/aarongoddard/Documents/Coding/wayfarer/frontend/src/util/session_util.js"],"names":["axios","jwt_decode","$","window","GET_ERRORS","CLEAR_ERRORS","RECEIVE_CURRENT_USER","setAuthToken","token","defaults","headers","common","registerUser","userData","history","dispatch","post","then","res","data","localStorage","setItem","decoded","setCurrentUser","catch","err","type","payload","response","loginUser","logoutUser","removeItem"],"mappings":"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","sourcesContent":["import axios from 'axios';\nimport jwt_decode from 'jwt-decode';\n\nconst $ = window.$;\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\nexport const RECEIVE_CURRENT_USER = \"RECEIVE_CURRENT_USER\";\n\nexport const setAuthToken = token => {\n  if (token) {\n    // This applies the authentication to all the headers - no more having to Postman hack it in\n    axios.defaults.headers.common['Authorization'] = token;\n  } else {\n    // Delete auth header - so that when you aren't authorized, it doesn't authorize you\n    delete axios.defaults.headers.common['Authorization'];\n  }\n};\n\n//Register User function\nexport const registerUser = (userData, history) => dispatch => {\n  axios\n    .post('/api/users/register', userData)\n    .then(res => {\n      //Save to localStorage\n      const { token } = res.data;\n      //Set token to ls\n      localStorage.setItem('jwtToken', token);\n      //Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n//Login User function - Get User Token\nexport const loginUser = userData => dispatch => {\n  axios\n    .post('/api/users/login', userData)\n    .then(res => {\n      //Save to localStorage\n      const { token } = res.data;\n      //Set token to ls\n      localStorage.setItem('jwtToken', token);\n      // Set token to Auth header\n      setAuthToken(token);\n      // Decode token to get user data\n      const decoded = jwt_decode(token);\n      // Set current user\n      dispatch(setCurrentUser(decoded));\n    })\n    .catch(err =>\n      dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      })\n    );\n};\n\n// Set logged in user\n\nexport const setCurrentUser = decoded => {\n  return {\n    type: RECEIVE_CURRENT_USER,\n    payload: decoded\n  };\n};\n\n// Log user out\nexport const logoutUser = () => dispatch => {\n  // Remove token from localStorage\n  localStorage.removeItem('jwtToken');\n  // Remove auth header for future requests\n  setAuthToken(false);\n  // Set current user to {} which will set isAuthenticated to false\n  dispatch(setCurrentUser({}));\n};"]},"metadata":{},"sourceType":"module"}