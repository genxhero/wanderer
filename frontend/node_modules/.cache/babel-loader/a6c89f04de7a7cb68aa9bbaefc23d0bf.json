{"ast":null,"code":"import axios from \"axios\"; // import jwt_decode from 'jwt-decode';\n// const $ = window.$;\n\nexport var RECEIVE_VEHICLE = 'RECEIVE_VEHICLE';\nexport var GET_ERRORS = \"GET_ERRORS\";\nexport var CLEAR_ERRORS = \"CLEAR_ERRORS\";\n\nvar receiveVehicle = function receiveVehicle(payload) {\n  return {\n    type: RECEIVE_VEHICLE,\n    payload: payload\n  };\n}; //this is add vehicle online\n// So the way this works is that the Authorization Header is already in place if the user logs in - that's what setAuthToken does in session_util\n// So really, addVehicleOnline and addVehicleOffline are going to be the _same method_, but aimed at different routes\n// As for the rest, you need to get the _data_ from the response before dispatching to the POJO action - as such, you want res.data, not just res\n// Beyond that, axios requests are fairly simple - think of it like jQuery AJAX, a little bit\n\n\nexport var addVehicleOnline = function addVehicleOnline(formData) {\n  return function (dispatch) {\n    return axios.post('/api/vehicles/addonline', formData).then(function (res) {\n      debugger;\n      return dispatch(receiveVehicle(res.data));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/aarongoddard/Documents/Coding/wayfarer/frontend/src/util/vehicles_util.js"],"names":["axios","RECEIVE_VEHICLE","GET_ERRORS","CLEAR_ERRORS","receiveVehicle","payload","type","addVehicleOnline","formData","dispatch","post","then","res","data","catch","err","response"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB,C,CACA;AAEA;;AAEA,OAAO,IAAMC,eAAe,GAAG,iBAAxB;AACP,OAAO,IAAMC,UAAU,GAAG,YAAnB;AACP,OAAO,IAAMC,YAAY,GAAG,cAArB;;AAEP,IAAMC,cAAc,GAAG,SAAjBA,cAAiB,CAAAC,OAAO;AAAA,SAAK;AAC/BC,IAAAA,IAAI,EAAEL,eADyB;AAE/BI,IAAAA,OAAO,EAAPA;AAF+B,GAAL;AAAA,CAA9B,C,CAMA;AACA;AACA;AACA;AACA;;;AAEA,OAAO,IAAME,gBAAgB,GAAG,SAAnBA,gBAAmB,CAACC,QAAD;AAAA,SAAc,UAAAC,QAAQ;AAAA,WACpDT,KAAK,CACFU,IADH,CACQ,yBADR,EACmCF,QADnC,EAEGG,IAFH,CAEQ,UAAAC,GAAG,EAAG;AACT;AACD,aAAOH,QAAQ,CAACL,cAAc,CAACQ,GAAG,CAACC,IAAL,CAAf,CAAf;AACD,KALH,EAMGC,KANH,CAMS,UAAAC,GAAG;AAAA,aAAIN,QAAQ,CAAC;AAACH,QAAAA,IAAI,EAAEJ,UAAP;AAAmBG,QAAAA,OAAO,EAAEU,GAAG,CAACC,QAAJ,CAAaH;AAAzC,OAAD,CAAZ;AAAA,KANZ,CADoD;AAAA,GAAtB;AAAA,CAAzB","sourcesContent":["import axios from \"axios\";\n// import jwt_decode from 'jwt-decode';\n\n// const $ = window.$;\n\nexport const RECEIVE_VEHICLE = 'RECEIVE_VEHICLE';\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\n\nconst receiveVehicle = payload => ({\n    type: RECEIVE_VEHICLE,\n    payload\n});\n\n\n//this is add vehicle online\n// So the way this works is that the Authorization Header is already in place if the user logs in - that's what setAuthToken does in session_util\n// So really, addVehicleOnline and addVehicleOffline are going to be the _same method_, but aimed at different routes\n// As for the rest, you need to get the _data_ from the response before dispatching to the POJO action - as such, you want res.data, not just res\n// Beyond that, axios requests are fairly simple - think of it like jQuery AJAX, a little bit\n\nexport const addVehicleOnline = (formData) => dispatch => (\n  axios\n    .post('/api/vehicles/addonline', formData)\n    .then(res =>{\n       debugger;\n      return dispatch(receiveVehicle(res.data));\n    })\n    .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}))\n    );\n\n"]},"metadata":{},"sourceType":"module"}