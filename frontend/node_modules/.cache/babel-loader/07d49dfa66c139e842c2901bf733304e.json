{"ast":null,"code":"import axios from \"axios\"; // import jwt_decode from 'jwt-decode';\n// const $ = window.$;\n\nexport var RECEIVE_VEHICLE = 'RECEIVE_VEHICLE';\nexport var RECEIVE_VEHICLES = 'RECEIVE_VEHICLES';\nexport var GET_ERRORS = \"GET_ERRORS\";\nexport var CLEAR_ERRORS = \"CLEAR_ERRORS\";\nexport var receiveVehicle = function receiveVehicle(payload) {\n  return {\n    type: RECEIVE_VEHICLE,\n    payload: payload\n  };\n};\nexport var receiveVehicles = function receiveVehicles(payload) {\n  return {\n    type: RECEIVE_VEHICLES,\n    payload: payload\n  };\n}; //this is add vehicle online\n// So the way this works is that the Authorization Header is already in place if the user logs in - that's what setAuthToken does in session_util\n// So really, addVehicleOnline and addVehicleOffline are going to be the _same method_, but aimed at different routes\n// As for the rest, you need to get the _data_ from the response before dispatching to the POJO action - as such, you want res.data, not just res\n// Beyond that, axios requests are fairly simple - think of it like jQuery AJAX, a little bit\n\nexport var addVehicleOnline = function addVehicleOnline(formData) {\n  return function (dispatch) {\n    return axios.post('/api/vehicles/addonline', formData).then(function (res) {\n      var dummy = \"you\";\n      debugger;\n      var gummy = \"bear\";\n      return dispatch(receiveVehicle(res.data));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\nexport var addVehicleOffline = function addVehicleOffline(formData) {\n  return function (dispatch) {\n    return axios.post('/api/vehicles/addoffline', formData).then(function (res) {\n      return dispatch(receiveVehicle(res.data));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\nexport var fetchUserVehicles = function fetchUserVehicles() {\n  return function (dispatch) {\n    return axios.get('/api/users/vehicles').then(function (res) {\n      return dispatch(receiveVehicles(res.data));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};\nexport var fetchVehicle = function fetchVehicle(vehicleId) {\n  return function (dispatch) {\n    return axios.get(\"/api/vehicles/\".concat(vehicleId)).then(function (res) {\n      return dispatch(receiveVehicle(res.data));\n    }).catch(function (err) {\n      return dispatch({\n        type: GET_ERRORS,\n        payload: err.response.data\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/aarongoddard/Documents/Coding/wayfarer/frontend/src/util/vehicles_util.js"],"names":["axios","RECEIVE_VEHICLE","RECEIVE_VEHICLES","GET_ERRORS","CLEAR_ERRORS","receiveVehicle","payload","type","receiveVehicles","addVehicleOnline","formData","dispatch","post","then","res","dummy","gummy","data","catch","err","response","addVehicleOffline","fetchUserVehicles","get","fetchVehicle","vehicleId"],"mappings":"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","sourcesContent":["import axios from \"axios\";\n// import jwt_decode from 'jwt-decode';\n\n// const $ = window.$;\n\nexport const RECEIVE_VEHICLE = 'RECEIVE_VEHICLE';\nexport const RECEIVE_VEHICLES = 'RECEIVE_VEHICLES';\nexport const GET_ERRORS = \"GET_ERRORS\";\nexport const CLEAR_ERRORS = \"CLEAR_ERRORS\";\n\nexport const receiveVehicle = payload => ({\n    type: RECEIVE_VEHICLE,\n    payload\n});\n\nexport const receiveVehicles = payload => ({\n  type: RECEIVE_VEHICLES,\n  payload\n})\n\n\n//this is add vehicle online\n// So the way this works is that the Authorization Header is already in place if the user logs in - that's what setAuthToken does in session_util\n// So really, addVehicleOnline and addVehicleOffline are going to be the _same method_, but aimed at different routes\n// As for the rest, you need to get the _data_ from the response before dispatching to the POJO action - as such, you want res.data, not just res\n// Beyond that, axios requests are fairly simple - think of it like jQuery AJAX, a little bit\n\nexport const addVehicleOnline = (formData) => dispatch => (\n  axios\n    .post('/api/vehicles/addonline', formData)\n    .then(res =>{\n      let dummy =\"you\";\n       debugger;\n       let gummy = \"bear\";\n      return dispatch(receiveVehicle(res.data));\n    })\n    .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}))\n);\n\nexport const addVehicleOffline = (formData) => dispatch => (\n  axios\n    .post('/api/vehicles/addoffline', formData)\n    .then(res => dispatch(receiveVehicle(res.data)))\n    .catch(err => dispatch({ type: GET_ERRORS, payload: err.response.data }))\n);\n\nexport const fetchUserVehicles = () => dispatch => (\n  axios\n    .get('/api/users/vehicles')\n    .then(res => dispatch(receiveVehicles(res.data)))\n    .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}))\n);\n\nexport const fetchVehicle = (vehicleId) => dispatch => (\n  axios\n  .get(`/api/vehicles/${vehicleId}`)\n  .then(res => dispatch(receiveVehicle(res.data)))\n  .catch(err => dispatch({type: GET_ERRORS, payload: err.response.data}))\n)\n"]},"metadata":{},"sourceType":"module"}