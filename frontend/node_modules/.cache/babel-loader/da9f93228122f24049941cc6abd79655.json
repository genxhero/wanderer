{"ast":null,"code":"import _classCallCheck from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/src/components/gas_pane_body.jsx\";\nimport React from \"react\";\nvar google = window.google;\nvar mapIcons = window.mapIcons; // === A method which returns an array of GLatLngs of points a given interval along the path ===\n\ngoogle.maps.LatLng.prototype.distanceFrom = function (newLatLng) {\n  var EarthRadiusMeters = 6378137.0; // meters\n\n  var lat1 = this.lat();\n  var lon1 = this.lng();\n  var lat2 = newLatLng.lat();\n  var lon2 = newLatLng.lng();\n  var dLat = (lat2 - lat1) * Math.PI / 180;\n  var dLon = (lon2 - lon1) * Math.PI / 180;\n  var a = Math.sin(dLat / 2) * Math.sin(dLat / 2) + Math.cos(lat1 * Math.PI / 180) * Math.cos(lat2 * Math.PI / 180) * Math.sin(dLon / 2) * Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = EarthRadiusMeters * c;\n  return d;\n};\n\ngoogle.maps.Polyline.prototype.GetPointsAtDistance = function (metres) {\n  var next = metres;\n  var points = []; // some awkward special cases\n\n  if (metres <= 0) return points;\n  var dist = 0;\n  var olddist = 0;\n\n  for (var i = 1; i < this.getPath().getLength(); i++) {\n    olddist = dist;\n    dist += this.getPath().getAt(i).distanceFrom(this.getPath().getAt(i - 1));\n\n    while (dist > next) {\n      var p1 = this.getPath().getAt(i - 1);\n      var p2 = this.getPath().getAt(i);\n      var m = (next - olddist) / (dist - olddist);\n      points.push(new google.maps.LatLng(p1.lat() + (p2.lat() - p1.lat()) * m, p1.lng() + (p2.lng() - p1.lng()) * m));\n      next += metres;\n    }\n  }\n\n  return points;\n}; // google.maps.Polyline.prototype.GetPointsAtDistance = google.maps.Polygon.prototype.GetPointsAtDistance;\n\n\nvar GasPaneBody =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GasPaneBody, _React$Component);\n\n  function GasPaneBody(props) {\n    var _this;\n\n    _classCallCheck(this, GasPaneBody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GasPaneBody).call(this, props));\n    _this.state = {\n      curLocation: {},\n      destination: {\n        lat: 41.8781,\n        lng: -87.6298\n      },\n      maxDistance: 2605846,\n      distanceToHotel: 304672,\n      distanceToFood: 402336\n    };\n    _this.initMap = _this.initMap.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.callback = _this.callback.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createMarker = _this.createMarker.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.map = null;\n    _this.getLocation = _this.getLocation.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.showPosition = _this.showPosition.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.calculateAndDisplayRoute = _this.calculateAndDisplayRoute.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.showSteps = _this.showSteps.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.attachInstructionText = _this.attachInstructionText.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.results = [];\n    return _this;\n  }\n\n  _createClass(GasPaneBody, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getLocation();\n    }\n  }, {\n    key: \"getLocation\",\n    value: function getLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(this.showPosition, function (error) {\n          return console.log(error);\n        });\n      } else {\n        alert(\"Geolocation is not supported by this browser.\");\n      }\n    }\n  }, {\n    key: \"showPosition\",\n    value: function showPosition(position) {\n      var lat = position.coords.latitude;\n      var lng = position.coords.longitude;\n      var curLocation = new google.maps.LatLng(lat, lng);\n      this.setState({\n        curLocation: curLocation\n      });\n      this.initMap();\n      console.log(this.state);\n    }\n  }, {\n    key: \"initMap\",\n    value: function initMap() {\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: this.state.curLocation,\n        zoom: 13,\n        styles: [{\n          elementType: 'geometry',\n          stylers: [{\n            color: '#242f3e'\n          }]\n        }, {\n          elementType: 'labels.text.stroke',\n          stylers: [{\n            color: '#242f3e'\n          }]\n        }, {\n          elementType: 'labels.text.fill',\n          stylers: [{\n            color: '#746855'\n          }]\n        }, {\n          featureType: 'administrative.locality',\n          elementType: 'labels.text.fill',\n          stylers: [{\n            color: '#d59563'\n          }]\n        }, {\n          featureType: 'poi',\n          elementType: 'labels.text.fill',\n          stylers: [{\n            color: '#d59563'\n          }]\n        }, {\n          featureType: 'poi.park',\n          elementType: 'geometry',\n          stylers: [{\n            color: '#263c3f'\n          }]\n        }, {\n          featureType: 'poi.park',\n          elementType: 'labels.text.fill',\n          stylers: [{\n            color: '#6b9a76'\n          }]\n        }, {\n          featureType: 'road',\n          elementType: 'geometry',\n          stylers: [{\n            color: '#38414e'\n          }]\n        }, {\n          featureType: 'road',\n          elementType: 'geometry.stroke',\n          stylers: [{\n            color: '#212a37'\n          }]\n        }, {\n          featureType: 'road',\n          elementType: 'labels.text.fill',\n          stylers: [{\n            color: '#9ca5b3'\n          }]\n        }, {\n          featureType: 'road.highway',\n          elementType: 'geometry',\n          stylers: [{\n            color: '#746855'\n          }]\n        }, {\n          featureType: 'road.highway',\n          elementType: 'geometry.stroke',\n          stylers: [{\n            color: '#1f2835'\n          }]\n        }, {\n          featureType: 'road.highway',\n          elementType: 'labels.text.fill',\n          stylers: [{\n            color: '#f3d19c'\n          }]\n        }, {\n          featureType: 'transit',\n          elementType: 'geometry',\n          stylers: [{\n            color: '#2f3948'\n          }]\n        }, {\n          featureType: 'transit.station',\n          elementType: 'labels.text.fill',\n          stylers: [{\n            color: '#d59563'\n          }]\n        }, {\n          featureType: 'water',\n          elementType: 'geometry',\n          stylers: [{\n            color: '#17263c'\n          }]\n        }, {\n          featureType: 'water',\n          elementType: 'labels.text.fill',\n          stylers: [{\n            color: '#515c6d'\n          }]\n        }, {\n          featureType: 'water',\n          elementType: 'labels.text.stroke',\n          stylers: [{\n            color: '#17263c'\n          }]\n        }]\n      });\n      this.map.setCenter(this.state.curLocation);\n      new google.maps.Marker({\n        map: this.map,\n        position: this.state.curLocation\n      });\n      var markerArray = [];\n      var directionsService = new google.maps.DirectionsService();\n      var directionsDisplay = new google.maps.DirectionsRenderer({\n        map: this.map\n      });\n      this.calculateAndDisplayRoute(directionsDisplay, directionsService, markerArray, this.map);\n    }\n  }, {\n    key: \"calculateAndDisplayRoute\",\n    value: function calculateAndDisplayRoute(directionsDisplay, directionsService, markerArray, map) {\n      var _this2 = this;\n\n      // First, remove any existing markers from the map.\n      for (var i = 0; i < markerArray.length; i++) {\n        markerArray[i].setMap(null);\n      } // Retrieve the start and end locations and create a DirectionsRequest using\n      // WALKING directions.\n\n\n      directionsService.route({\n        origin: this.state.curLocation,\n        destination: this.state.destination,\n        travelMode: 'DRIVING'\n      }, function (response, status) {\n        // Route the directions and pass the response to a function to create\n        // markers for each step.\n        if (status === 'OK') {\n          directionsDisplay.setDirections(response);\n\n          _this2.showSteps(response, markerArray, map);\n        } else {\n          window.alert('Directions request failed due to ' + status);\n        }\n      });\n    }\n  }, {\n    key: \"showSteps\",\n    value: function showSteps(directionResult, markerArray, map) {\n      // For each step, place a marker, and add the text to the marker's infowindow.\n      // Also attach the marker to an array so we can keep track of it and remove it\n      // when calculating new routes.\n      var myRoute = directionResult.routes[0].legs[0];\n      var passedDistance = 0;\n      var stop_for_gas = {};\n      var hotelIndex = 0;\n      var foodIndex = 0;\n      var find_gas = false;\n      var find_hotel = false;\n      var find_food = false;\n\n      for (var i = 0; i < myRoute.steps.length; i++) {\n        // var marker = markerArray[i] || new google.maps.Marker();\n        if (find_gas == false && passedDistance >= this.state.maxDistance) {\n          if (myRoute.steps[i - 1].distance.value > 10000) {\n            var poly = new google.maps.Polyline({\n              map: this.map,\n              path: [myRoute.steps[i - 1].start_location, myRoute.steps[i].start_location]\n            });\n            var points = poly.GetPointsAtDistance(5000);\n            console.log(\"points\", points);\n\n            for (var k = 0; k < points.length; k++) {\n              if (passedDistance + 5000 * k > this.state.maxDistance) {\n                var pmarker = new google.maps.Marker();\n                pmarker.setMap(this.map);\n                pmarker.setPosition(points[k]);\n                this.attachInstructionText(pmarker, \"refuel!!!\", this.map);\n                stop_for_gas = points[k];\n                find_gas = true;\n                break;\n              }\n            }\n          } else {\n            var marker = new google.maps.Marker(); // refuelIndex = i;\n\n            stop_for_gas = myRoute.steps[i].start_location;\n            marker.setMap(map);\n            marker.setPosition(myRoute.steps[i].start_location);\n            this.attachInstructionText(marker, \"refuel!!!\", map);\n            find_gas = true;\n          }\n        }\n\n        passedDistance += myRoute.steps[i].distance.value; // if (find_hotel == false && passedDistance >= this.state.distanceToHotel) {\n        //   var marker = new google.maps.Marker();\n        //   hotelIndex = i;\n        //   marker.setMap(map);\n        //   marker.setPosition(myRoute.steps[i].start_location);\n        //   this.attachInstructionText(marker, \"Have a rest!!!\", map);\n        //   find_hotel = true;\n        // }\n        // if (find_food == false && passedDistance >= this.state.distanceToFood) {\n        //   var marker = new google.maps.Marker();\n        //   foodIndex = i;\n        //   marker.setMap(map);\n        //   marker.setPosition(myRoute.steps[i].start_location);\n        //   this.attachInstructionText(marker, \"Have a meal!!!\", map);\n        //   find_food = true;\n        // }\n      }\n\n      var service = new google.maps.places.PlacesService(this.map);\n      service.nearbySearch({\n        location: stop_for_gas,\n        radius: 8000,\n        type: [\"gas_station\"]\n      }, this.callback); // service.nearbySearch({ \n      //     location: myRoute.steps[hotelIndex].start_location, \n      //     radius: 8000, \n      //     type: [\"lodging\"] \n      // },this.callback);\n      // service.nearbySearch({\n      //     location: myRoute.steps[foodIndex].start_location,\n      //     radius: 8000,\n      //     type: [\"restaurant\"]\n      // },this.callback);\n    }\n  }, {\n    key: \"attachInstructionText\",\n    value: function attachInstructionText(marker, text, map) {\n      var infowindow = new google.maps.InfoWindow();\n      google.maps.event.addListener(marker, 'click', function () {\n        // Open an info window when the marker is clicked on, containing the text\n        // of the step.\n        infowindow.setContent(text);\n        infowindow.open(map, marker);\n      });\n    }\n  }, {\n    key: \"callback\",\n    value: function callback(results, status) {\n      console.log(\"results\", results);\n      console.log(\"status\", status);\n\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          this.createMarker(results[i]);\n        }\n      }\n    }\n  }, {\n    key: \"createMarker\",\n    value: function createMarker(place) {\n      var markerType = '';\n\n      if (place.types.includes('gas_station')) {\n        markerType = 'gas_station';\n      } else if (place.types.includes(\"restaurant\")) {\n        markerType = 'food';\n      } else if (place.types.includes(\"lodging\")) {\n        markerType = 'hotel';\n      } else {\n        return;\n      }\n\n      var categoryMarkers = {\n        food: {\n          icon: '<span class=\"map-icon map-icon-restaurant\"></span>',\n          color: \"#00CCBB\"\n        },\n        gas_station: {\n          icon: '<span class=\"map-icon map-icon-gas-station\"></span>',\n          color: \"black\"\n        },\n        hotel: {\n          icon: '<span class=\"map-icon map-icon-lodging\"></span>',\n          color: \"#0E77E9\"\n        }\n      };\n      var marker = new mapIcons.Marker({\n        position: place.geometry.location,\n        map: this.map,\n        icon: {\n          path: mapIcons.shapes.SQUARE_ROUNDED,\n          fillColor: categoryMarkers[markerType].color,\n          fillOpacity: 1,\n          strokeColor: \"\",\n          strokeWeight: 0,\n          scale: 9 / 10\n        },\n        map_icon_label: categoryMarkers[markerType].icon\n      }); // var marker = new google.maps.Marker({\n      //     map: this.map,\n      //     position: place.geometry.location\n      // });\n\n      var infowindow = new google.maps.InfoWindow();\n      google.maps.event.addListener(marker, 'click', function () {\n        infowindow.setContent(markerType);\n        infowindow.open(this.map, this);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      console.log(this.props.vehicles.cityMpg);\n      var avgmpg = parseInt(this.props.vehicles.hwyMpg) + parseInt(this.props.cityMpg) / 2;\n      console.log(avgmpg);\n      return React.createElement(\"div\", {\n        className: \"gas-pane-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 400\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"output-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 401\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"output-head\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 402\n        },\n        __self: this\n      }, \" On the Road With\"), React.createElement(\"div\", {\n        className: \"output-data-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 403\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"output-car-name\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 404\n        },\n        __self: this\n      }, this.props.vehicles.name), React.createElement(\"div\", {\n        className: \"output-data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 405\n        },\n        __self: this\n      }, \" Year: \", this.props.vehicles.year, \" \"), React.createElement(\"div\", {\n        className: \"output-data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 406\n        },\n        __self: this\n      }, \"Make: \", this.props.vehicles.make, \" \"), React.createElement(\"div\", {\n        className: \"output-data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 407\n        },\n        __self: this\n      }, \"Model: \", this.props.vehicles.make, \" \"), React.createElement(\"div\", {\n        className: \"output-data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 408\n        },\n        __self: this\n      }, \"Average MPG: \", avgmpg, \" \"), React.createElement(\"div\", {\n        className: \"output-data\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 409\n        },\n        __self: this\n      }, \" \"))), React.createElement(\"div\", {\n        id: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 412\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"output-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 413\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GasPaneBody;\n}(React.Component);\n\nexport default GasPaneBody;","map":{"version":3,"sources":["/Users/aarongoddard/Documents/Coding/wayfarer/frontend/src/components/gas_pane_body.jsx"],"names":["React","google","window","mapIcons","maps","LatLng","prototype","distanceFrom","newLatLng","EarthRadiusMeters","lat1","lat","lon1","lng","lat2","lon2","dLat","Math","PI","dLon","a","sin","cos","c","atan2","sqrt","d","Polyline","GetPointsAtDistance","metres","next","points","dist","olddist","i","getPath","getLength","getAt","p1","p2","m","push","GasPaneBody","props","state","curLocation","destination","maxDistance","distanceToHotel","distanceToFood","initMap","bind","callback","createMarker","map","getLocation","showPosition","calculateAndDisplayRoute","showSteps","attachInstructionText","results","navigator","geolocation","getCurrentPosition","error","console","log","alert","position","coords","latitude","longitude","setState","Map","document","getElementById","center","zoom","styles","elementType","stylers","color","featureType","setCenter","Marker","markerArray","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","length","setMap","route","origin","travelMode","response","status","setDirections","directionResult","myRoute","routes","legs","passedDistance","stop_for_gas","hotelIndex","foodIndex","find_gas","find_hotel","find_food","steps","distance","value","poly","path","start_location","k","pmarker","setPosition","marker","service","places","PlacesService","nearbySearch","location","radius","type","text","infowindow","InfoWindow","event","addListener","setContent","open","PlacesServiceStatus","OK","place","markerType","types","includes","categoryMarkers","food","icon","gas_station","hotel","geometry","shapes","SQUARE_ROUNDED","fillColor","fillOpacity","strokeColor","strokeWeight","scale","map_icon_label","vehicles","cityMpg","avgmpg","parseInt","hwyMpg","name","year","make","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nconst google = window.google;\nconst mapIcons = window.mapIcons;\n\n\n\n// === A method which returns an array of GLatLngs of points a given interval along the path ===\ngoogle.maps.LatLng.prototype.distanceFrom = function(newLatLng) {\n  var EarthRadiusMeters = 6378137.0; // meters\n  var lat1 = this.lat();\n  var lon1 = this.lng();\n  var lat2 = newLatLng.lat();\n  var lon2 = newLatLng.lng();\n  var dLat = ((lat2 - lat1) * Math.PI) / 180;\n  var dLon = ((lon2 - lon1) * Math.PI) / 180;\n  var a =\n    Math.sin(dLat / 2) * Math.sin(dLat / 2) +\n    Math.cos((lat1 * Math.PI) / 180) *\n      Math.cos((lat2 * Math.PI) / 180) *\n      Math.sin(dLon / 2) *\n      Math.sin(dLon / 2);\n  var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1 - a));\n  var d = EarthRadiusMeters * c;\n  return d;\n};\n\ngoogle.maps.Polyline.prototype.GetPointsAtDistance = function (metres) {\n    var next = metres;\n    var points = [];\n    // some awkward special cases\n    if (metres <= 0) return points;\n    var dist = 0;\n    var olddist = 0;\n    for (var i = 1; (i < this.getPath().getLength()); i++) {\n        olddist = dist;\n        dist += this.getPath().getAt(i).distanceFrom(this.getPath().getAt(i - 1));\n\n        while (dist > next) {\n            var p1 = this.getPath().getAt(i - 1);\n            var p2 = this.getPath().getAt(i);\n            var m = (next - olddist) / (dist - olddist);\n            points.push(new google.maps.LatLng(p1.lat() + (p2.lat() - p1.lat()) * m, p1.lng() + (p2.lng() - p1.lng()) * m));\n            next += metres;\n        }\n    }\n    return points;\n}\n\n// google.maps.Polyline.prototype.GetPointsAtDistance = google.maps.Polygon.prototype.GetPointsAtDistance;\n\n\nclass GasPaneBody extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            curLocation: {},\n            destination: {lat: 41.8781, lng: -87.6298},\n            maxDistance: 2605846,\n            distanceToHotel: 304672,\n            distanceToFood: 402336\n        }\n\n        this.initMap = this.initMap.bind(this);\n        this.callback = this.callback.bind(this);\n        this.createMarker = this.createMarker.bind(this);\n        this.map = null;\n        this.getLocation = this.getLocation.bind(this);\n        this.showPosition = this.showPosition.bind(this);\n        this.calculateAndDisplayRoute = this.calculateAndDisplayRoute.bind(this);\n        this.showSteps = this.showSteps.bind(this);\n        this.attachInstructionText = this.attachInstructionText.bind(this);\n        this.results = [];\n    }\n\n    componentDidMount() {\n        this.getLocation();\n    }\n\n    getLocation() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.showPosition, error => console.log(error));\n        } else {\n            alert(\"Geolocation is not supported by this browser.\");\n        }\n        \n    }\n\n    showPosition(position) {\n        var lat = position.coords.latitude;\n        var lng = position.coords.longitude;\n\n        let curLocation = new google.maps.LatLng(lat, lng);\n         \n        this.setState({curLocation: curLocation});\n        this.initMap();\n\n        console.log(this.state);\n    }\n\n\n\n    initMap() {\n\n        this.map = new google.maps.Map(document.getElementById('map'), {\n            center: this.state.curLocation,\n            zoom: 13,\n            styles: [\n                { elementType: 'geometry', stylers: [{ color: '#242f3e' }] },\n                { elementType: 'labels.text.stroke', stylers: [{ color: '#242f3e' }] },\n                { elementType: 'labels.text.fill', stylers: [{ color: '#746855' }] },\n                {\n                    featureType: 'administrative.locality',\n                    elementType: 'labels.text.fill',\n                    stylers: [{ color: '#d59563' }]\n                },\n                {\n                    featureType: 'poi',\n                    elementType: 'labels.text.fill',\n                    stylers: [{ color: '#d59563' }]\n                },\n                {\n                    featureType: 'poi.park',\n                    elementType: 'geometry',\n                    stylers: [{ color: '#263c3f' }]\n                },\n                {\n                    featureType: 'poi.park',\n                    elementType: 'labels.text.fill',\n                    stylers: [{ color: '#6b9a76' }]\n                },\n                {\n                    featureType: 'road',\n                    elementType: 'geometry',\n                    stylers: [{ color: '#38414e' }]\n                },\n                {\n                    featureType: 'road',\n                    elementType: 'geometry.stroke',\n                    stylers: [{ color: '#212a37' }]\n                },\n                {\n                    featureType: 'road',\n                    elementType: 'labels.text.fill',\n                    stylers: [{ color: '#9ca5b3' }]\n                },\n                {\n                    featureType: 'road.highway',\n                    elementType: 'geometry',\n                    stylers: [{ color: '#746855' }]\n                },\n                {\n                    featureType: 'road.highway',\n                    elementType: 'geometry.stroke',\n                    stylers: [{ color: '#1f2835' }]\n                },\n                {\n                    featureType: 'road.highway',\n                    elementType: 'labels.text.fill',\n                    stylers: [{ color: '#f3d19c' }]\n                },\n                {\n                    featureType: 'transit',\n                    elementType: 'geometry',\n                    stylers: [{ color: '#2f3948' }]\n                },\n                {\n                    featureType: 'transit.station',\n                    elementType: 'labels.text.fill',\n                    stylers: [{ color: '#d59563' }]\n                },\n                {\n                    featureType: 'water',\n                    elementType: 'geometry',\n                    stylers: [{ color: '#17263c' }]\n                },\n                {\n                    featureType: 'water',\n                    elementType: 'labels.text.fill',\n                    stylers: [{ color: '#515c6d' }]\n                },\n                {\n                    featureType: 'water',\n                    elementType: 'labels.text.stroke',\n                    stylers: [{ color: '#17263c' }]\n                }\n            ]\n        });\n\n        this.map.setCenter(this.state.curLocation);\n\n        new google.maps.Marker({\n            map: this.map,\n            position: this.state.curLocation\n        });\n\n        var markerArray = [];\n        var directionsService = new google.maps.DirectionsService();\n        var directionsDisplay = new google.maps.DirectionsRenderer({map: this.map});\n\n        this.calculateAndDisplayRoute(\n            directionsDisplay, directionsService, markerArray, this.map);\n\n    }\n\n    calculateAndDisplayRoute(directionsDisplay, directionsService,\n        markerArray, map) {\n        // First, remove any existing markers from the map.\n        for (var i = 0; i < markerArray.length; i++) {\n            markerArray[i].setMap(null);\n        }\n\n        // Retrieve the start and end locations and create a DirectionsRequest using\n        // WALKING directions.\n        directionsService.route({\n            origin: this.state.curLocation,\n            destination: this.state.destination,\n            travelMode: 'DRIVING'\n        }, (response, status) => {\n            // Route the directions and pass the response to a function to create\n            // markers for each step.\n            if (status === 'OK') {\n                directionsDisplay.setDirections(response);\n                this.showSteps(response, markerArray, map);\n            } else {\n                window.alert('Directions request failed due to ' + status);\n            }\n        });\n    }\n\n    showSteps(directionResult, markerArray, map) {\n        // For each step, place a marker, and add the text to the marker's infowindow.\n        // Also attach the marker to an array so we can keep track of it and remove it\n        // when calculating new routes.\n        var myRoute = directionResult.routes[0].legs[0];\n        var passedDistance = 0;\n        let stop_for_gas = {};\n        let hotelIndex = 0; \n        let foodIndex = 0; \n        var find_gas = false;\n        var find_hotel = false;\n        var find_food = false;\n        for (var i = 0; i < myRoute.steps.length; i++) {\n            // var marker = markerArray[i] || new google.maps.Marker();\n            if (find_gas == false && passedDistance >= this.state.maxDistance) {\n                if (myRoute.steps[i-1].distance.value > 10000) {\n                    var poly = new google.maps.Polyline({\n                         map: this.map,\n                         path: [myRoute.steps[i-1].start_location, myRoute.steps[i].start_location]\n                    });\n\n                    var points = poly.GetPointsAtDistance(5000);\n\n                    console.log(\"points\", points);\n                    \n                    for (var k = 0; k < points.length; k++) {\n                        if (passedDistance + 5000*k > this.state.maxDistance){                        \n                            var pmarker = new google.maps.Marker();\n                            pmarker.setMap(this.map);\n                            pmarker.setPosition(points[k]);\n                            this.attachInstructionText(pmarker, \"refuel!!!\", this.map);\n                            stop_for_gas = points[k];\n                            find_gas = true;\n                            break;\n                        }\n                    }\n                } else {\n                    var marker = new google.maps.Marker();\n                    // refuelIndex = i;\n                    stop_for_gas = myRoute.steps[i].start_location;\n                    marker.setMap(map);\n                    marker.setPosition(myRoute.steps[i].start_location);\n                    this.attachInstructionText(marker, \"refuel!!!\", map);\n                    find_gas = true;\n                }\n\n            }\n            passedDistance += myRoute.steps[i].distance.value;\n\n            // if (find_hotel == false && passedDistance >= this.state.distanceToHotel) {\n            //   var marker = new google.maps.Marker();\n            //   hotelIndex = i;\n            //   marker.setMap(map);\n            //   marker.setPosition(myRoute.steps[i].start_location);\n            //   this.attachInstructionText(marker, \"Have a rest!!!\", map);\n            //   find_hotel = true;\n            // }\n\n            // if (find_food == false && passedDistance >= this.state.distanceToFood) {\n            //   var marker = new google.maps.Marker();\n            //   foodIndex = i;\n            //   marker.setMap(map);\n            //   marker.setPosition(myRoute.steps[i].start_location);\n            //   this.attachInstructionText(marker, \"Have a meal!!!\", map);\n            //   find_food = true;\n            // }\n\n        }\n\n        var service = new google.maps.places.PlacesService(this.map);\n        service.nearbySearch({ \n            location: stop_for_gas, \n            radius: 8000, \n            type: [\"gas_station\"] \n        },this.callback);\n\n        // service.nearbySearch({ \n        //     location: myRoute.steps[hotelIndex].start_location, \n        //     radius: 8000, \n        //     type: [\"lodging\"] \n        // },this.callback);\n\n        // service.nearbySearch({\n        //     location: myRoute.steps[foodIndex].start_location,\n        //     radius: 8000,\n        //     type: [\"restaurant\"]\n        // },this.callback);\n    }\n\n    attachInstructionText(marker, text, map) {\n        let infowindow = new google.maps.InfoWindow();\n        google.maps.event.addListener(marker, 'click', () => {\n            // Open an info window when the marker is clicked on, containing the text\n            // of the step.\n            infowindow.setContent(text);\n            infowindow.open(map, marker);\n        });\n    }\n\n    callback(results, status) {\n        console.log(\"results\", results);\n        console.log(\"status\", status);\n\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n\n            for (var i = 0; i < results.length; i++) {\n\n                this.createMarker(results[i],);\n            }\n        }\n    }\n\n\n    createMarker(place) {\n        let markerType = ''\n        if (place.types.includes('gas_station')) {\n            markerType = 'gas_station';\n        } else if (place.types.includes(\"restaurant\")) {\n            markerType = 'food';\n        } else if (place.types.includes(\"lodging\")) {\n            markerType = 'hotel';\n        } else {\n            return;\n        }\n        const categoryMarkers = { \n            food: { \n                icon: '<span class=\"map-icon map-icon-restaurant\"></span>', \n                color: \"#00CCBB\" \n            }, \n            gas_station: { \n                icon: '<span class=\"map-icon map-icon-gas-station\"></span>',\n                color: \"black\"\n            },\n            hotel: {\n                icon: '<span class=\"map-icon map-icon-lodging\"></span>',\n                color: \"#0E77E9\"\n            }\n        };\n\n\n        var marker = new mapIcons.Marker({\n          position: place.geometry.location,\n          map: this.map,\n          icon: {\n            path: mapIcons.shapes.SQUARE_ROUNDED,\n            fillColor: categoryMarkers[markerType].color,\n            fillOpacity: 1,\n            strokeColor: \"\",\n            strokeWeight: 0,\n            scale: 9 / 10\n          },\n          map_icon_label:categoryMarkers[markerType].icon\n        });\n        // var marker = new google.maps.Marker({\n        //     map: this.map,\n        //     position: place.geometry.location\n        // });\n        let infowindow = new google.maps.InfoWindow();\n        google.maps.event.addListener(marker, 'click', function () {\n            infowindow.setContent(markerType);\n            infowindow.open(this.map, this);\n        });\n    }\n\n    render() {\n        console.log(this.props.vehicles.cityMpg);\n        let avgmpg = parseInt(this.props.vehicles.hwyMpg) + parseInt(this.props.cityMpg) / 2;\n        console.log(avgmpg);\n       return (\n           <div className=\"gas-pane-body\">\n                <div className=\"output-left\">\n                    <div className=\"output-head\"> On the Road With</div>\n                    <div className=\"output-data-container\">\n                       <div className=\"output-car-name\">{this.props.vehicles.name}</div>\n                       <div className=\"output-data\"> Year: {this.props.vehicles.year} </div>\n                       <div className=\"output-data\">Make: {this.props.vehicles.make} </div>\n                       <div className=\"output-data\">Model: {this.props.vehicles.make} </div>\n                       <div className=\"output-data\">Average MPG: {avgmpg} </div>\n                       <div className=\"output-data\"> </div>\n                    </div>\n                </div>\n                <div id=\"map\"></div>\n                <div className=\"output-right\"></div>\n           </div>\n       )\n    }\n}\n\nexport default GasPaneBody;"]},"metadata":{},"sourceType":"module"}