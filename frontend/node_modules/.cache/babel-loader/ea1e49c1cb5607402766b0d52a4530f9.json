{"ast":null,"code":"import _classCallCheck from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/src/components/gas_pane_head.jsx\";\nimport React from 'react';\nimport PlacesAutocomplete, { geocodeByAddress, getLatLng } from \"react-places-autocomplete\";\nimport { connect } from 'react-redux';\nimport { receiveMapData as _receiveMapData } from '../util/map_util';\n\nvar mapStateToProps = function mapStateToProps(state) {\n  return {\n    maxDistance: state.vehicles.maxRouteLength\n  };\n};\n\nvar mapDispatchToProps = function mapDispatchToProps(dispatch) {\n  return {\n    receiveMapData: function receiveMapData(mapData) {\n      return dispatch(_receiveMapData(mapData));\n    }\n  };\n};\n\nvar GasPaneHead =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GasPaneHead, _React$Component);\n\n  function GasPaneHead(props) {\n    var _this;\n\n    _classCallCheck(this, GasPaneHead);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GasPaneHead).call(this, props));\n    _this.state = {\n      funmode: false,\n      foodSelected: false,\n      hotelSelected: false,\n      barSelected: false,\n      formData: {\n        percentFull: 0,\n        timeToHotel: 0,\n        timeToFood: 0,\n        maxDistance: _this.props.maxDistance\n      }\n    };\n    _this.handleSubmit = _this.handleSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.handleAddress = _this.handleAddress.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.shadowSubmit = _this.shadowSubmit.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.toggleFunmode = _this.toggleFunmode.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  } // calculateMaxDistance() {\n  //   let newForm = Object.assign({}, this.state.formData);\n  //   let actualPercent = parseInt(this.state.formData.percentFull, 10);\n  //   let actualMax = (this.props.maxDistance * actualPercent) * 16.09344;\n  //   newForm.percentFull = actualPercent;\n  //   newForm.maxDistance = actualMax;\n  //   this.setState({formData: newForm});\n  // }\n  // calculateHours() {\n  //   let newForm = Object.assign({}, this.state.formData);\n  //   let actualHotel = parseInt(this.state.formData.timeToHotel, 10) * 3600\n  //   let actualFood = parseInt(this.state.formData.timeToFood, 10) * 3600\n  //   newForm.timeToHotel = actualHotel;\n  //   newForm.timeToFood = actualFood;\n  //   this.setState({ formData: newForm });\n  // }\n\n\n  _createClass(GasPaneHead, [{\n    key: \"update\",\n    value: function update(field) {\n      var _this2 = this;\n\n      return function (e) {\n        var newForm = Object.assign({}, _this2.state.formData);\n        newForm[field] = e.target.value;\n\n        _this2.setState({\n          formData: newForm\n        });\n      };\n    }\n  }, {\n    key: \"handleAddress\",\n    value: function handleAddress(latLng) {\n      var newForm = Object.assign({}, this.state.formData);\n      newForm.address = latLng;\n      this.setState({\n        formData: newForm\n      });\n    } // all conversions are done in handleSubmit because the helper functions weren't working\n\n  }, {\n    key: \"handleSubmit\",\n    value: function handleSubmit(e) {\n      e.preventDefault();\n      var newForm = Object.assign({}, this.state.formData);\n      var actualHotel = parseInt(this.state.formData.timeToHotel, 10) * 3600;\n      var actualFood = parseInt(this.state.formData.timeToFood, 10) * 3600;\n      var actualPercent = parseInt(this.state.formData.percentFull, 10);\n      var actualMax = this.props.maxDistance * actualPercent * 16.09344;\n      newForm.percentFull = actualPercent;\n      newForm.maxDistance = Math.trunc(actualMax);\n      newForm.timeToHotel = actualHotel;\n      newForm.timeToFood = actualFood;\n      console.log(newForm);\n      this.props.receiveMapData(newForm);\n    }\n  }, {\n    key: \"toggleFunmode\",\n    value: function toggleFunmode() {\n      if (this.state.funmode === false) {\n        this.setState({\n          funmode: true\n        });\n      } else {\n        this.setState({\n          funmode: false\n        });\n      }\n    }\n  }, {\n    key: \"shadowSubmit\",\n    value: function shadowSubmit() {\n      var vroom = new Audio();\n      console.log(\"the script is running\");\n      vroom.src = \"https://s3-us-west-1.amazonaws.com/wayfarer-sounds/BMW%2BDRIVEBY.mp3\";\n      vroom.play();\n      var shadow = document.getElementsByClassName('shadow-submit')[0];\n      shadow.click();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"gas-pane-head\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        className: \"cool-mode\",\n        onClick: this.toggleFunmode,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 111\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"gas-pane-form-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        className: \"gas-pane-form\",\n        onSubmit: this.handleSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 113\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gas-pane-input\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 114\n        },\n        __self: this\n      }, React.createElement(LocationSearchInput, {\n        className: \"gas-pane-input-field\",\n        handleAddress: this.handleAddress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 115\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"percent-container\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: this.state.funmode === true ? \"percent-label-fun\" : \"percent-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117\n        },\n        __self: this\n      }, \"How full is you tank?\"), React.createElement(\"span\", {\n        className: \"percent-sign\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }, \"%\"), React.createElement(\"input\", {\n        id: \"tank-percent\",\n        className: \"gas-pane-input-field\",\n        placeholder: \"100\",\n        value: this.state.formData.percentFull,\n        onChange: this.update(\"percentFull\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }))), React.createElement(\"div\", {\n        className: \"gas-pane-checkboxes\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        className: \"gas-pane-choices-label\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      }, \"After how many hours of driving will you...\"), React.createElement(\"input\", {\n        className: \"gas-pane-choice\",\n        placeHolder: \"Be hungry like the wolf\",\n        value: this.state.formData.timeToFood,\n        onChange: this.update(\"timeToFood\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 133\n        },\n        __self: this\n      }), React.createElement(\"input\", {\n        className: \"gas-pane-choice\",\n        placeHolder: \"Have to stop for the night\",\n        value: this.state.formData.timeToHotel,\n        onChange: this.update(\"timeToHotel\"),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"button-div\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"gas-pane-submit\",\n        onClick: this.shadowSubmit,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 137\n        },\n        __self: this\n      }, React.createElement(\"span\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 138\n        },\n        __self: this\n      }, \"DO IT!\")), React.createElement(\"div\", {\n        className: \"gas-pane-text-bg\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"gas-pane-submit-shadow\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141\n        },\n        __self: this\n      })), React.createElement(\"input\", {\n        type: \"submit\",\n        className: \"shadow-submit\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143\n        },\n        __self: this\n      }))));\n    }\n  }]);\n\n  return GasPaneHead;\n}(React.Component);\n\nexport default connect(mapStateToProps, mapDispatchToProps)(GasPaneHead);\n\nvar LocationSearchInput =\n/*#__PURE__*/\nfunction (_React$Component2) {\n  _inherits(LocationSearchInput, _React$Component2);\n\n  function LocationSearchInput(props) {\n    var _this3;\n\n    _classCallCheck(this, LocationSearchInput);\n\n    _this3 = _possibleConstructorReturn(this, _getPrototypeOf(LocationSearchInput).call(this, props));\n\n    _this3.handleChange = function (address) {\n      _this3.setState({\n        address: address\n      });\n    };\n\n    _this3.handleSelect = function (address) {\n      geocodeByAddress(address).then(function (results) {\n        return getLatLng(results[0]);\n      }).then(function (latLng) {\n        return _this3.props.handleAddress(latLng);\n      }).catch(function (error) {\n        return console.error(\"Error\", error);\n      });\n    };\n\n    _this3.state = {\n      address: \"\"\n    };\n    return _this3;\n  }\n\n  _createClass(LocationSearchInput, [{\n    key: \"render\",\n    value: function render() {\n      return React.createElement(PlacesAutocomplete, {\n        value: this.state.address,\n        onChange: this.handleChange,\n        onSelect: this.handleSelect,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }, function (_ref) {\n        var getInputProps = _ref.getInputProps,\n            suggestions = _ref.suggestions,\n            getSuggestionItemProps = _ref.getSuggestionItemProps,\n            loading = _ref.loading;\n        return React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 180\n          },\n          __self: this\n        }, React.createElement(\"input\", Object.assign({}, getInputProps({\n          placeholder: \"Where to?\",\n          className: \"gas-pane-input-field\"\n        }), {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 181\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          className: \"autocomplete-dropdown-container\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 187\n          },\n          __self: this\n        }, loading && React.createElement(\"div\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 188\n          },\n          __self: this\n        }, \"Loading...\"), suggestions.map(function (suggestion) {\n          var className = suggestion.active ? \"suggestion-item--active\" : \"suggestion-item\"; // inline style for demonstration purpose\n\n          var style = suggestion.active ? {\n            backgroundColor: \"#fafafa\",\n            cursor: \"pointer\"\n          } : {\n            backgroundColor: \"#ffffff\",\n            cursor: \"pointer\"\n          };\n          return React.createElement(\"div\", Object.assign({}, getSuggestionItemProps(suggestion, {\n            className: className,\n            style: style\n          }), {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 198\n            },\n            __self: this\n          }), React.createElement(\"span\", {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 204\n            },\n            __self: this\n          }, suggestion.description));\n        })));\n      });\n    }\n  }]);\n\n  return LocationSearchInput;\n}(React.Component);","map":{"version":3,"sources":["/Users/aarongoddard/Documents/Coding/wayfarer/frontend/src/components/gas_pane_head.jsx"],"names":["React","PlacesAutocomplete","geocodeByAddress","getLatLng","connect","receiveMapData","mapStateToProps","state","maxDistance","vehicles","maxRouteLength","mapDispatchToProps","dispatch","mapData","GasPaneHead","props","funmode","foodSelected","hotelSelected","barSelected","formData","percentFull","timeToHotel","timeToFood","handleSubmit","bind","handleAddress","shadowSubmit","toggleFunmode","field","e","newForm","Object","assign","target","value","setState","latLng","address","preventDefault","actualHotel","parseInt","actualFood","actualPercent","actualMax","Math","trunc","console","log","vroom","Audio","src","play","shadow","document","getElementsByClassName","click","update","Component","LocationSearchInput","handleChange","handleSelect","then","results","catch","error","getInputProps","suggestions","getSuggestionItemProps","loading","placeholder","className","map","suggestion","active","style","backgroundColor","cursor","description"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,OAAOC,kBAAP,IACEC,gBADF,EAEEC,SAFF,QAGO,2BAHP;AAIA,SAAQC,OAAR,QAAsB,aAAtB;AACA,SAAQC,cAAc,IAAdA,eAAR,QAA6B,kBAA7B;;AAEA,IAAMC,eAAe,GAAG,SAAlBA,eAAkB,CAAAC,KAAK;AAAA,SAAK;AAChCC,IAAAA,WAAW,EAAED,KAAK,CAACE,QAAN,CAAeC;AADI,GAAL;AAAA,CAA7B;;AAIA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,CAAAC,QAAQ;AAAA,SAAK;AACtCP,IAAAA,cAAc,EAAE,wBAACQ,OAAD;AAAA,aAAaD,QAAQ,CAACP,eAAc,CAACQ,OAAD,CAAf,CAArB;AAAA;AADsB,GAAL;AAAA,CAAnC;;IAIMC,W;;;;;AAEF,uBAAYC,KAAZ,EAAkB;AAAA;;AAAA;;AACd,qFAAMA,KAAN;AACA,UAAKR,KAAL,GAAa;AACXS,MAAAA,OAAO,EAAE,KADE;AAEXC,MAAAA,YAAY,EAAE,KAFH;AAGXC,MAAAA,aAAa,EAAE,KAHJ;AAIXC,MAAAA,WAAW,EAAE,KAJF;AAKXC,MAAAA,QAAQ,EAAE;AACRC,QAAAA,WAAW,EAAE,CADL;AAERC,QAAAA,WAAW,EAAE,CAFL;AAGRC,QAAAA,UAAU,EAAE,CAHJ;AAIRf,QAAAA,WAAW,EAAE,MAAKO,KAAL,CAAWP;AAJhB;AALC,KAAb;AAaF,UAAKgB,YAAL,GAAoB,MAAKA,YAAL,CAAkBC,IAAlB,uDAApB;AACA,UAAKC,aAAL,GAAqB,MAAKA,aAAL,CAAmBD,IAAnB,uDAArB;AACA,UAAKE,YAAL,GAAoB,MAAKA,YAAL,CAAkBF,IAAlB,uDAApB;AACA,UAAKG,aAAL,GAAqB,MAAKA,aAAL,CAAmBH,IAAnB,uDAArB;AAlBgB;AAmBjB,G,CAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;2BAEOI,K,EAAO;AAAA;;AACZ,aAAO,UAAAC,CAAC,EAAI;AACZ,YAAIC,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,MAAI,CAAC1B,KAAL,CAAWa,QAA7B,CAAd;AACAW,QAAAA,OAAO,CAACF,KAAD,CAAP,GAAiBC,CAAC,CAACI,MAAF,CAASC,KAA1B;;AACA,QAAA,MAAI,CAACC,QAAL,CAAc;AAAChB,UAAAA,QAAQ,EAAEW;AAAX,SAAd;AACC,OAJD;AAKD;;;kCAEaM,M,EAAQ;AACpB,UAAIN,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK1B,KAAL,CAAWa,QAA7B,CAAd;AACAW,MAAAA,OAAO,CAACO,OAAR,GAAkBD,MAAlB;AACA,WAAKD,QAAL,CAAc;AAAChB,QAAAA,QAAQ,EAAEW;AAAX,OAAd;AACD,K,CAED;;;;iCACaD,C,EAAG;AACdA,MAAAA,CAAC,CAACS,cAAF;AACA,UAAIR,OAAO,GAAGC,MAAM,CAACC,MAAP,CAAc,EAAd,EAAkB,KAAK1B,KAAL,CAAWa,QAA7B,CAAd;AACA,UAAIoB,WAAW,GAAGC,QAAQ,CAAC,KAAKlC,KAAL,CAAWa,QAAX,CAAoBE,WAArB,EAAkC,EAAlC,CAAR,GAAgD,IAAlE;AACA,UAAIoB,UAAU,GAAGD,QAAQ,CAAC,KAAKlC,KAAL,CAAWa,QAAX,CAAoBG,UAArB,EAAiC,EAAjC,CAAR,GAA+C,IAAhE;AACA,UAAIoB,aAAa,GAAGF,QAAQ,CAAC,KAAKlC,KAAL,CAAWa,QAAX,CAAoBC,WAArB,EAAkC,EAAlC,CAA5B;AACA,UAAIuB,SAAS,GAAI,KAAK7B,KAAL,CAAWP,WAAX,GAAyBmC,aAA1B,GAA2C,QAA3D;AACAZ,MAAAA,OAAO,CAACV,WAAR,GAAsBsB,aAAtB;AACAZ,MAAAA,OAAO,CAACvB,WAAR,GAAsBqC,IAAI,CAACC,KAAL,CAAWF,SAAX,CAAtB;AACAb,MAAAA,OAAO,CAACT,WAAR,GAAsBkB,WAAtB;AACAT,MAAAA,OAAO,CAACR,UAAR,GAAqBmB,UAArB;AACAK,MAAAA,OAAO,CAACC,GAAR,CAAYjB,OAAZ;AACA,WAAKhB,KAAL,CAAWV,cAAX,CAA0B0B,OAA1B;AACD;;;oCAGe;AACd,UAAI,KAAKxB,KAAL,CAAWS,OAAX,KAAuB,KAA3B,EAAkC;AAC/B,aAAKoB,QAAL,CAAc;AAACpB,UAAAA,OAAO,EAAE;AAAV,SAAd;AACD,OAFF,MAEQ;AACN,aAAKoB,QAAL,CAAc;AAAEpB,UAAAA,OAAO,EAAE;AAAX,SAAd;AACA;AACH;;;mCAIW;AACZ,UAAMiC,KAAK,GAAG,IAAIC,KAAJ,EAAd;AACAH,MAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ;AACAC,MAAAA,KAAK,CAACE,GAAN,GAAY,sEAAZ;AACAF,MAAAA,KAAK,CAACG,IAAN;AACA,UAAMC,MAAM,GAAGC,QAAQ,CAACC,sBAAT,CAAgC,eAAhC,EAAiD,CAAjD,CAAf;AACAF,MAAAA,MAAM,CAACG,KAAP;AACD;;;6BAEU;AAET,aAAO;AAAK,QAAA,SAAS,EAAC,eAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACH;AAAQ,QAAA,SAAS,EAAC,WAAlB;AAA8B,QAAA,OAAO,EAAE,KAAK5B,aAA5C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADG,EAEH;AAAK,QAAA,SAAS,EAAC,yBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,eAAhB;AAAgC,QAAA,QAAQ,EAAE,KAAKJ,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,gBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACA,oBAAC,mBAAD;AAAqB,QAAA,SAAS,EAAC,sBAA/B;AAAsD,QAAA,aAAa,EAAE,KAAKE,aAA1E;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADA,EAEE;AAAK,QAAA,SAAS,EAAC,mBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EACX,KAAKnB,KAAL,CAAWS,OAAX,KAAuB,IAAvB,GACI,mBADJ,GAEI,eAHR;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCADF,EAQE;AAAM,QAAA,SAAS,EAAC,cAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aARF,EASE;AAAO,QAAA,EAAE,EAAC,cAAV;AAAyB,QAAA,SAAS,EAAC,sBAAnC;AAA0D,QAAA,WAAW,EAAC,KAAtE;AAA4E,QAAA,KAAK,EAAE,KAAKT,KAAL,CAAWa,QAAX,CAAoBC,WAAvG;AAAoH,QAAA,QAAQ,EAAE,KAAKoC,MAAL,CAAY,aAAZ,CAA9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QATF,CAFF,CADF,EAgBE;AAAK,QAAA,SAAS,EAAC,qBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAM,QAAA,SAAS,EAAC,wBAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uDADF,EAIE;AAAO,QAAA,SAAS,EAAC,iBAAjB;AAAmC,QAAA,WAAW,EAAC,yBAA/C;AAAyE,QAAA,KAAK,EAAE,KAAKlD,KAAL,CAAWa,QAAX,CAAoBG,UAApG;AAAgH,QAAA,QAAQ,EAAE,KAAKkC,MAAL,CAAY,YAAZ,CAA1H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE;AAAO,QAAA,SAAS,EAAC,iBAAjB;AAAmC,QAAA,WAAW,EAAC,4BAA/C;AAA4E,QAAA,KAAK,EAAE,KAAKlD,KAAL,CAAWa,QAAX,CAAoBE,WAAvG;AAAoH,QAAA,QAAQ,EAAE,KAAKmC,MAAL,CAAY,aAAZ,CAA9H;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CAhBF,EAuBE;AAAK,QAAA,SAAS,EAAC,YAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAK,QAAA,SAAS,EAAC,iBAAf;AAAiC,QAAA,OAAO,EAAE,KAAK9B,YAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBADF,CADF,EAIE;AAAK,QAAA,SAAS,EAAC,kBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAJF,EAKE;AAAK,QAAA,SAAS,EAAC,wBAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QALF,CAvBF,EA8BE;AAAO,QAAA,IAAI,EAAC,QAAZ;AAAqB,QAAA,SAAS,EAAC,eAA/B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QA9BF,CADF,CAFG,CAAP;AAqCD;;;;EAlIuB3B,KAAK,CAAC0D,S;;AAqIhC,eAAetD,OAAO,CACpBE,eADoB,EAEpBK,kBAFoB,CAAP,CAGbG,WAHa,CAAf;;IAKM6C,mB;;;;;AACJ,+BAAY5C,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,8FAAMA,KAAN;;AADiB,WAKnB6C,YALmB,GAKJ,UAAAtB,OAAO,EAAI;AACxB,aAAKF,QAAL,CAAc;AAAEE,QAAAA,OAAO,EAAPA;AAAF,OAAd;AACD,KAPkB;;AAAA,WASnBuB,YATmB,GASJ,UAAAvB,OAAO,EAAI;AACxBpC,MAAAA,gBAAgB,CAACoC,OAAD,CAAhB,CACGwB,IADH,CACQ,UAAAC,OAAO;AAAA,eAAI5D,SAAS,CAAC4D,OAAO,CAAC,CAAD,CAAR,CAAb;AAAA,OADf,EAEGD,IAFH,CAEQ,UAAAzB,MAAM;AAAA,eAAI,OAAKtB,KAAL,CAAWW,aAAX,CAAyBW,MAAzB,CAAJ;AAAA,OAFd,EAGG2B,KAHH,CAGS,UAAAC,KAAK;AAAA,eAAIlB,OAAO,CAACkB,KAAR,CAAc,OAAd,EAAuBA,KAAvB,CAAJ;AAAA,OAHd;AAID,KAdkB;;AAEjB,WAAK1D,KAAL,GAAa;AAAE+B,MAAAA,OAAO,EAAE;AAAX,KAAb;AAFiB;AAGlB;;;;6BAaQ;AACP,aACE,oBAAC,kBAAD;AACE,QAAA,KAAK,EAAE,KAAK/B,KAAL,CAAW+B,OADpB;AAEE,QAAA,QAAQ,EAAE,KAAKsB,YAFjB;AAGE,QAAA,QAAQ,EAAE,KAAKC,YAHjB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAKG;AAAA,YAAGK,aAAH,QAAGA,aAAH;AAAA,YAAkBC,WAAlB,QAAkBA,WAAlB;AAAA,YAA+BC,sBAA/B,QAA+BA,sBAA/B;AAAA,YAAuDC,OAAvD,QAAuDA,OAAvD;AAAA,eACC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE,+CACMH,aAAa,CAAC;AAChBI,UAAAA,WAAW,EAAE,WADG;AAEhBC,UAAAA,SAAS,EAAE;AAFK,SAAD,CADnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WADF,EAOE;AAAK,UAAA,SAAS,EAAC,iCAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACGF,OAAO,IAAI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wBADd,EAEGF,WAAW,CAACK,GAAZ,CAAgB,UAAAC,UAAU,EAAI;AAC7B,cAAMF,SAAS,GAAGE,UAAU,CAACC,MAAX,GACd,yBADc,GAEd,iBAFJ,CAD6B,CAI7B;;AACA,cAAMC,KAAK,GAAGF,UAAU,CAACC,MAAX,GACV;AAAEE,YAAAA,eAAe,EAAE,SAAnB;AAA8BC,YAAAA,MAAM,EAAE;AAAtC,WADU,GAEV;AAAED,YAAAA,eAAe,EAAE,SAAnB;AAA8BC,YAAAA,MAAM,EAAE;AAAtC,WAFJ;AAGA,iBACE,6CACMT,sBAAsB,CAACK,UAAD,EAAa;AACrCF,YAAAA,SAAS,EAATA,SADqC;AAErCI,YAAAA,KAAK,EAALA;AAFqC,WAAb,CAD5B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,cAME;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,aAAOF,UAAU,CAACK,WAAlB,CANF,CADF;AAUD,SAlBA,CAFH,CAPF,CADD;AAAA,OALH,CADF;AAwCD;;;;EA1D+B9E,KAAK,CAAC0D,S","sourcesContent":["import React from 'react';\nimport PlacesAutocomplete, {\n  geocodeByAddress,\n  getLatLng\n} from \"react-places-autocomplete\";\nimport {connect} from 'react-redux';\nimport {receiveMapData} from '../util/map_util';\n\nconst mapStateToProps = state => ({\n  maxDistance: state.vehicles.maxRouteLength\n});\n\nconst mapDispatchToProps = dispatch => ({\n  receiveMapData: (mapData) => dispatch(receiveMapData(mapData))\n});\n\nclass GasPaneHead extends React.Component {\n\n    constructor(props){\n        super(props);\n        this.state = {\n          funmode: false,\n          foodSelected: false,\n          hotelSelected: false,\n          barSelected: false,\n          formData: {\n            percentFull: 0,\n            timeToHotel: 0,\n            timeToFood: 0,\n            maxDistance: this.props.maxDistance\n          }\n        }\n      \n      this.handleSubmit = this.handleSubmit.bind(this);\n      this.handleAddress = this.handleAddress.bind(this);\n      this.shadowSubmit = this.shadowSubmit.bind(this);\n      this.toggleFunmode = this.toggleFunmode.bind(this);\n    }\n\n    // calculateMaxDistance() {\n    //   let newForm = Object.assign({}, this.state.formData);\n    //   let actualPercent = parseInt(this.state.formData.percentFull, 10);\n    //   let actualMax = (this.props.maxDistance * actualPercent) * 16.09344;\n    //   newForm.percentFull = actualPercent;\n    //   newForm.maxDistance = actualMax;\n    //   this.setState({formData: newForm});\n    // }\n\n    // calculateHours() {\n    //   let newForm = Object.assign({}, this.state.formData);\n    //   let actualHotel = parseInt(this.state.formData.timeToHotel, 10) * 3600\n    //   let actualFood = parseInt(this.state.formData.timeToFood, 10) * 3600\n    //   newForm.timeToHotel = actualHotel;\n    //   newForm.timeToFood = actualFood;\n    //   this.setState({ formData: newForm });\n    // }\n\n    update(field) {\n      return e => {\n      let newForm = Object.assign({}, this.state.formData);\n      newForm[field] = e.target.value;\n      this.setState({formData: newForm});\n      }\n    }\n\n    handleAddress(latLng) {\n      let newForm = Object.assign({}, this.state.formData);\n      newForm.address = latLng;\n      this.setState({formData: newForm});\n    }\n\n    // all conversions are done in handleSubmit because the helper functions weren't working\n    handleSubmit(e) {\n      e.preventDefault();\n      let newForm = Object.assign({}, this.state.formData);\n      let actualHotel = parseInt(this.state.formData.timeToHotel, 10) * 3600;\n      let actualFood = parseInt(this.state.formData.timeToFood, 10) * 3600;\n      let actualPercent = parseInt(this.state.formData.percentFull, 10);\n      let actualMax = (this.props.maxDistance * actualPercent) * 16.09344;\n      newForm.percentFull = actualPercent;\n      newForm.maxDistance = Math.trunc(actualMax);\n      newForm.timeToHotel = actualHotel;\n      newForm.timeToFood = actualFood;\n      console.log(newForm);\n      this.props.receiveMapData(newForm);\n    }\n\n \n    toggleFunmode() {\n      if (this.state.funmode === false) {\n         this.setState({funmode: true});\n       } else {\n        this.setState({ funmode: false });\n       } \n    }\n    \n\n    \n  shadowSubmit(){\n    const vroom = new Audio();\n    console.log(\"the script is running\");\n    vroom.src = \"https://s3-us-west-1.amazonaws.com/wayfarer-sounds/BMW%2BDRIVEBY.mp3\";\n    vroom.play();\n    const shadow = document.getElementsByClassName('shadow-submit')[0];\n    shadow.click();\n  }\n    \n    render() {\n\n    return <div className=\"gas-pane-head\">\n        <button className=\"cool-mode\" onClick={this.toggleFunmode} />\n        <div className=\"gas-pane-form-container\">\n          <form className=\"gas-pane-form\" onSubmit={this.handleSubmit}>\n            <div className=\"gas-pane-input\">\n            <LocationSearchInput className=\"gas-pane-input-field\" handleAddress={this.handleAddress} />\n              <div className=\"percent-container\">\n                <span className={\n                    this.state.funmode === true\n                      ? \"percent-label-fun\"\n                      : \"percent-label\"\n                  }>How full is you tank?\n                </span>\n\n                <span className=\"percent-sign\">%</span>\n                <input id=\"tank-percent\" className=\"gas-pane-input-field\" placeholder=\"100\" value={this.state.formData.percentFull} onChange={this.update(\"percentFull\")} />\n              </div>\n            </div>\n\n            <div className=\"gas-pane-checkboxes\">\n              <span className=\"gas-pane-choices-label\">\n                After how many hours of driving will you...\n              </span>\n              <input className=\"gas-pane-choice\" placeHolder=\"Be hungry like the wolf\" value={this.state.formData.timeToFood} onChange={this.update(\"timeToFood\")} />\n              <input className=\"gas-pane-choice\" placeHolder=\"Have to stop for the night\" value={this.state.formData.timeToHotel} onChange={this.update(\"timeToHotel\")} />\n            </div>\n            <div className=\"button-div\">\n              <div className=\"gas-pane-submit\" onClick={this.shadowSubmit}>\n                <span>DO IT!</span>\n              </div>\n              <div className=\"gas-pane-text-bg\" />\n              <div className=\"gas-pane-submit-shadow\" />\n            </div>\n            <input type=\"submit\" className=\"shadow-submit\" />\n          </form>\n        </div>\n      </div>;\n  }\n}\n\nexport default connect(\n  mapStateToProps,\n  mapDispatchToProps\n)(GasPaneHead);\n\nclass LocationSearchInput extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = { address: \"\" };\n  }\n\n  handleChange = address => {\n    this.setState({ address });\n  };\n\n  handleSelect = address => {\n    geocodeByAddress(address)\n      .then(results => getLatLng(results[0]))\n      .then(latLng => this.props.handleAddress(latLng))\n      .catch(error => console.error(\"Error\", error));\n  };\n\n  render() {\n    return (\n      <PlacesAutocomplete\n        value={this.state.address}\n        onChange={this.handleChange}\n        onSelect={this.handleSelect}\n      >\n        {({ getInputProps, suggestions, getSuggestionItemProps, loading }) => (\n          <div>\n            <input\n              {...getInputProps({\n                placeholder: \"Where to?\",\n                className: \"gas-pane-input-field\"\n              })}\n            />\n            <div className=\"autocomplete-dropdown-container\">\n              {loading && <div>Loading...</div>}\n              {suggestions.map(suggestion => {\n                const className = suggestion.active\n                  ? \"suggestion-item--active\"\n                  : \"suggestion-item\";\n                // inline style for demonstration purpose\n                const style = suggestion.active\n                  ? { backgroundColor: \"#fafafa\", cursor: \"pointer\" }\n                  : { backgroundColor: \"#ffffff\", cursor: \"pointer\" };\n                return (\n                  <div\n                    {...getSuggestionItemProps(suggestion, {\n                      className,\n                      style\n                    })}\n                  >\n                    <span>{suggestion.description}</span>\n                  </div>\n                );\n              })}\n            </div>\n          </div>\n        )}\n      </PlacesAutocomplete>\n    );\n  }\n}"]},"metadata":{},"sourceType":"module"}