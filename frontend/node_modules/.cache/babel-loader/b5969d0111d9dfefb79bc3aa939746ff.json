{"ast":null,"code":"import _classCallCheck from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/Users/aarongoddard/Documents/Coding/wayfarer/frontend/src/components/gas_pane_body.jsx\";\nimport React from \"react\";\nvar google = window.google;\n\nvar GasPaneBody =\n/*#__PURE__*/\nfunction (_React$Component) {\n  _inherits(GasPaneBody, _React$Component);\n\n  function GasPaneBody(props) {\n    var _this;\n\n    _classCallCheck(this, GasPaneBody);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(GasPaneBody).call(this, props));\n    _this.state = {\n      curLocation: {},\n      destination: {\n        lat: 37.335072,\n        lng: -122.029399\n      },\n      maxDistance: 71800\n    };\n    _this.initMap = _this.initMap.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.callback = _this.callback.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.createMarker = _this.createMarker.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.map = null;\n    _this.getLocation = _this.getLocation.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.showPosition = _this.showPosition.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.calculateAndDisplayRoute = _this.calculateAndDisplayRoute.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.showSteps = _this.showSteps.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.attachInstructionText = _this.attachInstructionText.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.results = [];\n    return _this;\n  }\n\n  _createClass(GasPaneBody, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this.getLocation();\n    }\n  }, {\n    key: \"getLocation\",\n    value: function getLocation() {\n      if (navigator.geolocation) {\n        navigator.geolocation.getCurrentPosition(this.showPosition, function (error) {\n          return console.log(error);\n        });\n      } else {\n        alert(\"Geolocation is not supported by this browser.\");\n      }\n    }\n  }, {\n    key: \"showPosition\",\n    value: function showPosition(position) {\n      var lat = position.coords.latitude;\n      var lng = position.coords.longitude;\n      var curLocation = new google.maps.LatLng(lat, lng);\n      this.setState({\n        curLocation: curLocation\n      });\n      this.initMap();\n      console.log(this.state);\n    }\n  }, {\n    key: \"initMap\",\n    value: function initMap() {\n      console.log(this.state.curLocation);\n      this.map = new google.maps.Map(document.getElementById('map'), {\n        center: this.state.curLocation,\n        zoom: 13\n      });\n      this.map.setCenter(this.state.curLocation);\n      new google.maps.Marker({\n        map: this.map,\n        position: this.state.curLocation\n      });\n      var markerArray = [];\n      var directionsService = new google.maps.DirectionsService();\n      var directionsDisplay = new google.maps.DirectionsRenderer({\n        map: this.map\n      });\n      var stepDisplay = new google.maps.InfoWindow();\n      this.calculateAndDisplayRoute(directionsDisplay, directionsService, markerArray, stepDisplay, this.map);\n      var service = new google.maps.places.PlacesService(this.map);\n      service.nearbySearch({\n        location: this.state.curLocation,\n        radius: 1500,\n        type: ['gas_station']\n      }, this.callback);\n    }\n  }, {\n    key: \"calculateAndDisplayRoute\",\n    value: function calculateAndDisplayRoute(directionsDisplay, directionsService, markerArray, stepDisplay, map) {\n      var _this2 = this;\n\n      // First, remove any existing markers from the map.\n      for (var i = 0; i < markerArray.length; i++) {\n        markerArray[i].setMap(null);\n      } // Retrieve the start and end locations and create a DirectionsRequest using\n      // WALKING directions.\n\n\n      directionsService.route({\n        origin: this.state.curLocation,\n        destination: this.state.destination,\n        travelMode: 'DRIVING'\n      }, function (response, status) {\n        // Route the directions and pass the response to a function to create\n        // markers for each step.\n        if (status === 'OK') {\n          directionsDisplay.setDirections(response);\n\n          _this2.showSteps(response, markerArray, stepDisplay, map);\n        } else {\n          window.alert('Directions request failed due to ' + status);\n        }\n      });\n    }\n  }, {\n    key: \"showSteps\",\n    value: function showSteps(directionResult, markerArray, stepDisplay, map) {\n      // For each step, place a marker, and add the text to the marker's infowindow.\n      // Also attach the marker to an array so we can keep track of it and remove it\n      // when calculating new routes.\n      var myRoute = directionResult.routes[0].legs[0];\n      var passedDistance = 0;\n\n      for (var i = 0; i < myRoute.steps.length; i++) {\n        var marker = markerArray[i] = markerArray[i] || new google.maps.Marker();\n        passedDistance += myRoute.steps[i].distance.value;\n        console.log(passedDistance);\n\n        if (passedDistance + 1000 >= this.state.maxDistance) {\n          myRoute.steps[i].instructions = \"refuel!!!\";\n          marker.setMap(map);\n          marker.setPosition(myRoute.steps[i].start_location);\n          this.attachInstructionText(stepDisplay, marker, myRoute.steps[i].instructions, map);\n          continue;\n        }\n\n        marker.setMap(map);\n        marker.setPosition(myRoute.steps[i].start_location);\n        this.attachInstructionText(stepDisplay, marker, myRoute.steps[i].instructions, map);\n      }\n    }\n  }, {\n    key: \"attachInstructionText\",\n    value: function attachInstructionText(stepDisplay, marker, text, map) {\n      google.maps.event.addListener(marker, 'click', function () {\n        // Open an info window when the marker is clicked on, containing the text\n        // of the step.\n        stepDisplay.setContent(text);\n        stepDisplay.open(map, marker);\n      });\n    }\n  }, {\n    key: \"callback\",\n    value: function callback(results, status) {\n      console.log(\"results\", results);\n      console.log(\"status\", status);\n\n      if (status === google.maps.places.PlacesServiceStatus.OK) {\n        for (var i = 0; i < results.length; i++) {\n          this.createMarker(results[i]);\n        }\n      }\n    }\n  }, {\n    key: \"createMarker\",\n    value: function createMarker(place) {\n      var marker = new google.maps.Marker({\n        map: this.map,\n        position: place.geometry.location\n      });\n      var infowindow = new google.maps.InfoWindow();\n      google.maps.event.addListener(marker, 'click', function () {\n        infowindow.setContent(place.vicinity);\n        infowindow.open(this.map, this);\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      return React.createElement(\"div\", {\n        className: \"gas-pane-body\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 171\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"output-left\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 172\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        id: \"map\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"output-right\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 174\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return GasPaneBody;\n}(React.Component);\n\nexport default GasPaneBody;","map":{"version":3,"sources":["/Users/aarongoddard/Documents/Coding/wayfarer/frontend/src/components/gas_pane_body.jsx"],"names":["React","google","window","GasPaneBody","props","state","curLocation","destination","lat","lng","maxDistance","initMap","bind","callback","createMarker","map","getLocation","showPosition","calculateAndDisplayRoute","showSteps","attachInstructionText","results","navigator","geolocation","getCurrentPosition","error","console","log","alert","position","coords","latitude","longitude","maps","LatLng","setState","Map","document","getElementById","center","zoom","setCenter","Marker","markerArray","directionsService","DirectionsService","directionsDisplay","DirectionsRenderer","stepDisplay","InfoWindow","service","places","PlacesService","nearbySearch","location","radius","type","i","length","setMap","route","origin","travelMode","response","status","setDirections","directionResult","myRoute","routes","legs","passedDistance","steps","marker","distance","value","instructions","setPosition","start_location","text","event","addListener","setContent","open","PlacesServiceStatus","OK","place","geometry","infowindow","vicinity","Component"],"mappings":"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","sourcesContent":["import React from \"react\";\nconst google = window.google;\n\nclass GasPaneBody extends React.Component {\n    constructor(props) {\n        super(props);\n\n        this.state = {\n            curLocation: {},\n            destination: {lat: 37.335072, lng: -122.029399},\n            maxDistance: 71800\n        }\n\n        this.initMap = this.initMap.bind(this);\n        this.callback = this.callback.bind(this);\n        this.createMarker = this.createMarker.bind(this);\n        this.map = null;\n        this.getLocation = this.getLocation.bind(this);\n        this.showPosition = this.showPosition.bind(this);\n        this.calculateAndDisplayRoute = this.calculateAndDisplayRoute.bind(this);\n        this.showSteps = this.showSteps.bind(this);\n        this.attachInstructionText = this.attachInstructionText.bind(this);\n        this.results = [];\n    }\n\n    componentDidMount() {\n        this.getLocation();\n    }\n\n    getLocation() {\n        if (navigator.geolocation) {\n            navigator.geolocation.getCurrentPosition(this.showPosition, error => console.log(error));\n        } else {\n            alert(\"Geolocation is not supported by this browser.\");\n        }\n        \n    }\n\n    showPosition(position) {\n        var lat = position.coords.latitude;\n        var lng = position.coords.longitude;\n\n        let curLocation = new google.maps.LatLng(lat, lng);\n         \n        this.setState({curLocation: curLocation});\n        this.initMap();\n\n        console.log(this.state);\n    }\n\n    initMap() {\n        console.log(this.state.curLocation);\n\n        this.map = new google.maps.Map(document.getElementById('map'), {\n            center: this.state.curLocation,\n            zoom: 13\n        });\n\n        this.map.setCenter(this.state.curLocation);\n\n        new google.maps.Marker({\n            map: this.map,\n            position: this.state.curLocation\n        });\n\n        var markerArray = [];\n        var directionsService = new google.maps.DirectionsService();\n        var directionsDisplay = new google.maps.DirectionsRenderer({map: this.map});\n        var stepDisplay = new google.maps.InfoWindow();\n\n        this.calculateAndDisplayRoute(\n            directionsDisplay, directionsService, markerArray, stepDisplay, this.map);\n\n        var service = new google.maps.places.PlacesService(this.map);\n        service.nearbySearch({\n            location: this.state.curLocation,\n            radius: 1500,\n            type: ['gas_station']\n        }, this.callback);\n    }\n\n    calculateAndDisplayRoute(directionsDisplay, directionsService,\n        markerArray, stepDisplay, map) {\n        // First, remove any existing markers from the map.\n        for (var i = 0; i < markerArray.length; i++) {\n            markerArray[i].setMap(null);\n        }\n\n        // Retrieve the start and end locations and create a DirectionsRequest using\n        // WALKING directions.\n        directionsService.route({\n            origin: this.state.curLocation,\n            destination: this.state.destination,\n            travelMode: 'DRIVING'\n        }, (response, status) => {\n            // Route the directions and pass the response to a function to create\n            // markers for each step.\n            if (status === 'OK') {\n                directionsDisplay.setDirections(response);\n                this.showSteps(response, markerArray, stepDisplay, map);\n            } else {\n                window.alert('Directions request failed due to ' + status);\n            }\n        });\n    }\n\n    showSteps(directionResult, markerArray, stepDisplay, map) {\n        // For each step, place a marker, and add the text to the marker's infowindow.\n        // Also attach the marker to an array so we can keep track of it and remove it\n        // when calculating new routes.\n        var myRoute = directionResult.routes[0].legs[0];\n        var passedDistance = 0;\n        for (var i = 0; i < myRoute.steps.length; i++) {\n            var marker = markerArray[i] = markerArray[i] || new google.maps.Marker();\n            passedDistance += myRoute.steps[i].distance.value;\n            console.log(passedDistance);\n            \n            if (passedDistance + 1000 >= this.state.maxDistance) {\n                myRoute.steps[i].instructions = \"refuel!!!\";\n                marker.setMap(map);\n                marker.setPosition(myRoute.steps[i].start_location);\n                this.attachInstructionText(\n                    stepDisplay, marker, myRoute.steps[i].instructions, map);\n                continue;\n            }\n            marker.setMap(map);\n            marker.setPosition(myRoute.steps[i].start_location);\n            this.attachInstructionText(\n                stepDisplay, marker, myRoute.steps[i].instructions, map);\n        }\n    }\n\n    attachInstructionText(stepDisplay, marker, text, map) {\n        google.maps.event.addListener(marker, 'click', () => {\n            // Open an info window when the marker is clicked on, containing the text\n            // of the step.\n            stepDisplay.setContent(text);\n            stepDisplay.open(map, marker);\n        });\n    }\n\n    callback(results, status) {\n        console.log(\"results\", results);\n        console.log(\"status\", status);\n\n        if (status === google.maps.places.PlacesServiceStatus.OK) {\n\n            for (var i = 0; i < results.length; i++) {\n\n                this.createMarker(results[i]);\n            }\n        }\n    }\n\n\n    createMarker(place) {\n        var marker = new google.maps.Marker({\n            map: this.map,\n            position: place.geometry.location\n        });\n        let infowindow = new google.maps.InfoWindow();\n        google.maps.event.addListener(marker, 'click', function () {\n            infowindow.setContent(place.vicinity);\n            infowindow.open(this.map, this);\n        });\n    }\n\n    render() {\n        \n       return (\n           <div className=\"gas-pane-body\">\n                <div className=\"output-left\"></div>\n                <div id=\"map\"></div>\n                <div className=\"output-right\"></div>\n           </div>\n       )\n    }\n}\n\nexport default GasPaneBody;"]},"metadata":{},"sourceType":"module"}